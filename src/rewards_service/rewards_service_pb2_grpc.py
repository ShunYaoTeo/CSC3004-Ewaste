# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rewards_service_pb2 as rewards__service__pb2


class RewardServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddPoints = channel.unary_unary(
                '/rewards.RewardService/AddPoints',
                request_serializer=rewards__service__pb2.AddPointsRequest.SerializeToString,
                response_deserializer=rewards__service__pb2.AddPointsResponse.FromString,
                )
        self.GetRewards = channel.unary_unary(
                '/rewards.RewardService/GetRewards',
                request_serializer=rewards__service__pb2.GetRewardsRequest.SerializeToString,
                response_deserializer=rewards__service__pb2.GetRewardsResponse.FromString,
                )
        self.GetUserRewards = channel.unary_unary(
                '/rewards.RewardService/GetUserRewards',
                request_serializer=rewards__service__pb2.GetUserRewardsRequest.SerializeToString,
                response_deserializer=rewards__service__pb2.GetUserRewardsResponse.FromString,
                )
        self.GetUserPoints = channel.unary_unary(
                '/rewards.RewardService/GetUserPoints',
                request_serializer=rewards__service__pb2.GetUserPointsRequest.SerializeToString,
                response_deserializer=rewards__service__pb2.GetUserPointsResponse.FromString,
                )
        self.RedeemReward = channel.unary_unary(
                '/rewards.RewardService/RedeemReward',
                request_serializer=rewards__service__pb2.RedeemRewardRequest.SerializeToString,
                response_deserializer=rewards__service__pb2.RedeemRewardResponse.FromString,
                )


class RewardServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddPoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRewards(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserRewards(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RedeemReward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RewardServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPoints,
                    request_deserializer=rewards__service__pb2.AddPointsRequest.FromString,
                    response_serializer=rewards__service__pb2.AddPointsResponse.SerializeToString,
            ),
            'GetRewards': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRewards,
                    request_deserializer=rewards__service__pb2.GetRewardsRequest.FromString,
                    response_serializer=rewards__service__pb2.GetRewardsResponse.SerializeToString,
            ),
            'GetUserRewards': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserRewards,
                    request_deserializer=rewards__service__pb2.GetUserRewardsRequest.FromString,
                    response_serializer=rewards__service__pb2.GetUserRewardsResponse.SerializeToString,
            ),
            'GetUserPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserPoints,
                    request_deserializer=rewards__service__pb2.GetUserPointsRequest.FromString,
                    response_serializer=rewards__service__pb2.GetUserPointsResponse.SerializeToString,
            ),
            'RedeemReward': grpc.unary_unary_rpc_method_handler(
                    servicer.RedeemReward,
                    request_deserializer=rewards__service__pb2.RedeemRewardRequest.FromString,
                    response_serializer=rewards__service__pb2.RedeemRewardResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rewards.RewardService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RewardService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rewards.RewardService/AddPoints',
            rewards__service__pb2.AddPointsRequest.SerializeToString,
            rewards__service__pb2.AddPointsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRewards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rewards.RewardService/GetRewards',
            rewards__service__pb2.GetRewardsRequest.SerializeToString,
            rewards__service__pb2.GetRewardsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserRewards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rewards.RewardService/GetUserRewards',
            rewards__service__pb2.GetUserRewardsRequest.SerializeToString,
            rewards__service__pb2.GetUserRewardsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rewards.RewardService/GetUserPoints',
            rewards__service__pb2.GetUserPointsRequest.SerializeToString,
            rewards__service__pb2.GetUserPointsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RedeemReward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rewards.RewardService/RedeemReward',
            rewards__service__pb2.RedeemRewardRequest.SerializeToString,
            rewards__service__pb2.RedeemRewardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
